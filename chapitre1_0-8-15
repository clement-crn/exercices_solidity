// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.15;

contract ZombieFactory {

    event NewZombie(string name, uint dna);

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

    struct Zombie {
        string name;
        uint dna;
    }

    Zombie[] public zombies;


    function _createZombie(string memory _name, uint _dna) private {
        zombies.push(Zombie(_name, _dna));
        //zombies.push(Zombie(_name, _dna)) - 1 (c'est quoi ce bordel) op√©rateur "-" impossible;
        emit NewZombie(_name, _dna);
    }



    function _generateRandomDna(string memory _str) private view returns (uint) {
        //plus possible de prendre le hash keccak d'un uint
        //on doit donc convertir l'uint en bytes
        uint rand = uint(keccak256(abi.encodePacked(_str)));
        return rand % dnaModulus;
    }

    function createRandomZombie(string memory _name) public {
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }

}
